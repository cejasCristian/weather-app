{"version":3,"sources":["components/SearchBar.jsx","components/WeatherCard.jsx","components/Spinner.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SearchBar","getInfo","setLoading","useState","city","setCity","country","setCountry","error","setError","className","name","type","placeholder","onChange","e","target","value","onClick","preventDefault","setTimeout","WeatherCard","main","sys","wind","weather","newIcon","weatherStatus","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icon","Object","keys","indexOf","weatherIcons","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","id","Math","round","temp","temp_max","temp_min","pressure","humidity","speed","defaultProps","Spinner","APIKEY","App","weathers","setWeathers","loading","fetchData","a","newCity","newCountry","fetch","data","json","info","useEffect","component","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e3c3e2fd.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport ReactDOM from 'react-dom'\nimport './searchBarStyle.css';\n\nconst SearchBar = ({getInfo, setLoading}) => {\n\n     //state def\n    const [city, setCity] = useState('');//Searchbar\n    const [country, setCountry] = useState('');//Searchbar\n\n    const [error, setError] = useState(false);\n\n    const handleClick = (e) => {\n        e.preventDefault();\n        getInfo([city, country])\n\n\n        if (city === '' || country === ''){\n            setError(true);\n            return;\n        } else {\n            setError(false);\n        \n            //Enable spinner\n            setLoading(true);\n\n            setTimeout( () => {\n                setCity(city);\n                setCountry(country);\n                //Disable spinner\n                setLoading(false);\n            }, 3000);\n        }\n\n        setCountry('');\n        setCity('');\n        \n    };\n\n    \n\n\n    return (\n        <>\n                <div className = 'container'>\n                        <div className = 'row'>\n                            <div className = 'col-md-3 py-1 offset-md-2 '>\n                                <input\n                                    className = 'form-control'\n                                    name = 'city'\n                                    type = 'text'\n                                    placeholder = 'City'\n                                    onChange = { e => setCity(e.target.value)}\n                                />\n                            </div>\n                            <div className = 'col-md-3 py-1'>\n                                <input\n                                    className = 'form-control'\n                                    name = 'country'\n                                    type = 'text'\n                                    placeholder = 'Country'\n                                    onChange = { e => setCountry(e.target.value)}\n                                />\n                            </div>\n                            <div className = 'col-md-3 mt-md-0 py-1 text-md-left text-center'>\n                                <button \n                                    type ='submit'\n                                    className ='btn btn-outline-light text-center'\n                                    onClick = {handleClick}\n                                >Get Weather\n                                </button>\n                            </div>\n                        </div>\n                </div>\n            \n            {(error) ? <p className = \"error mt-2\">All fields are required</p> : null}\n            \n        </>\n    );\n}\n\nexport default SearchBar;","\r\nimport React from 'react';\r\nimport './WeatherCardStyle.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n//  react/prop-types\r\nconst WeatherCard = ({ main, name, sys, wind, weather }) => {\r\n\r\n  let weatherStatus = weather[0].main;\r\n\r\n  const weatherIcons = (weatherStatus) => {\r\n  \r\n    const weatherIcon = {\r\n        Thunderstorm: \"wi-thunderstorm\",\r\n        Drizzle: \"wi-sleet\",\r\n        Rain: \"wi-storm-showers\",\r\n        Snow: \"wi-snow\",\r\n        Atmosphere: \"wi-fog\",\r\n        Clear: \"wi-day-sunny\",\r\n        Clouds: \"wi-day-fog\"\r\n    };\r\n\r\n    let icon = '';\r\n  \r\n    if(Object.keys(weatherIcon).indexOf(weatherStatus) > -1){\r\n      icon = weatherIcon[weatherStatus];\r\n    }\r\n\r\n    return `wi ${icon} display-1`;\r\n\r\n}\r\n\r\n  const newIcon = weatherIcons(weatherStatus);\r\n\r\n  //Date\r\n  const dateBuilder = (d) => {\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n      {( name != '' && sys.country != '') ? (\r\n        <div className='container'>\r\n          <div className='row justify-content-md-center m-3'>\r\n            <div className='col col-md-4 weatherCard'>\r\n              <div className='head'>\r\n                <h1 className='text-center display-4'>{name}, {sys.country}</h1>\r\n                <h6 className='text-center display-8'>{dateBuilder(new Date())}</h6>\r\n                <div id='' className='text-center'>\r\n                  <i id='icon' className={newIcon}/>\r\n                  <p id='desc'>{weather[0].main}</p>\r\n                  <h2 className='display-4'>{Math.round(main.temp)} °C</h2>\r\n                  <div className='row'>\r\n                    <div className='col-6 text-center'>\r\n                      <h4 className='display-6'>\r\n                        MAX: {Math.round(main.temp_max)} °C\r\n                      </h4>\r\n                    </div>\r\n                    <div className='col-6 text-center'>\r\n                      <h4 className='display-6'>\r\n                        MIN: {Math.round(main.temp_min)} °C\r\n                      </h4>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className='otherInfo'>\r\n                <div className='row'>\r\n                  <div className='pressure col-4 text-center'>\r\n                    <i className='wi wi-barometer' />\r\n                    <span> {main.pressure} hPA</span>\r\n                  </div>\r\n                  <div className='humidity col-4 text-center'>\r\n                    <i className='wi wi-humidity' />\r\n                    <span> {main.humidity}%</span>\r\n                  </div>\r\n                  <div className='windspeed col-4 text-center'>\r\n                    <i className='wi wi-strong-wind' />\r\n                    <span> {wind.speed} km/h</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : ('')}\r\n    </>\r\n  );\r\n};\r\n\r\nWeatherCard.propTypes = {\r\n  main: PropTypes.object,\r\n  name: PropTypes.string,\r\n  sys: PropTypes.object,\r\n  wind: PropTypes.object,\r\n  weather: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      description: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nWeatherCard.defaultProps = {\r\n  main: {},\r\n  name: '',\r\n  sys: {},\r\n  wind: {},\r\n  weather: [\r\n    {\r\n      main:'',\r\n      id:'',\r\n    },\r\n  ],\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from 'react'\nimport './Spinner.css'\n\nconst Spinner = () =>{\n    return(\n        <div className=\"sk-chase\">\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n        </div>\n    );\n}\n\nexport default Spinner;","import React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\nimport WeatherCard from './components/WeatherCard';\nimport Spinner from './components/Spinner';\nimport './app.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\n\nconst APIKEY = '5e2ef034ee4429608f79d03af9ea638b';\n\nfunction App() {\n\n  const [weathers, setWeathers] = useState({}); // API\n  const [loading, setLoading] = useState (false);\n\n  const handleInfoFromSearchbar = (info) => {\n    return info[0] === '' || info[1]===''\n      ? null\n      :fetchData(info[0],info[1]);\n  };\n\n  const fetchData = async (newCity = '', newCountry = '') => {\n    const data = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${newCity},${newCountry}&appid=${APIKEY}&units=metric`\n    );\n    const info = await data.json();\n    setWeathers(info);\n  };\n\n  // API call\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const { main, name, sys, wind, weather } = weathers;\n\n\n  console.log('API', weathers);\n\n  let component;\n\n  if(loading) {\n    component = <Spinner />\n  } else {\n    component = <WeatherCard \n                  main={main} \n                  name={name}\n                  sys={sys}\n                  wind={wind}\n                  weather={weather}\n                />\n  }\n\n  return (\n    <>\n      <SearchBar\n        getInfo={handleInfoFromSearchbar}\n        setLoading={setLoading}\n      />\n      {component}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}